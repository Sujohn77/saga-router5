{"version":3,"sources":["webpack:///./develop/redux/posts/reducers.js","webpack:///./develop/routes/PostPage/Posts.jsx","webpack:///./develop/routes/PostPage/actions.js","webpack:///./develop/routes/PostPage/index.js","webpack:///./develop/routes/PostPage/reducers.js","webpack:///./develop/routes/PostPage/sagas.js"],"names":["postsPage","state","action","posts","mapStateToProps","application","Posts","connect","props","postsItems","map","post","key","title","body","React","Component","routeNode","POSTS_LOADED","POSTS_REQUEST","loadPosts","type","fetchPosts","sagaPostsWatcher","sagaWorker","takeEvery","call","payload","put","axios","response"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEO,IAAMA,SAAS,GAAG,SAAZA,SAAY,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAAd;AACI;AACI;AAEIC,aAAK,EAAED,MAAM,CAACC;AAFlB;;AAIJ;AACI;AAPR;AADG,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFP;AAEA;AACA;AACA;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACH,KAAD,EAAW;AAC/B,SAAO;AACHE,SAAK,EAAEF,KAAK,CAACI,WAAN,CAAkBL,SAAlB,CAA4BG;AADhC,GAAP;AAGH,CAJD;;IAOMG,K,WADLC,2DAAO,CAACH,eAAD,C;;;;;;;;;;;;;6BAEK;AAAA,UACCD,KADD,GACW,KAAKK,KADhB,CACCL,KADD;AAGL,UAAIM,UAAU,GACVN,KAAK,IACLA,KAAK,CAACO,GAAN,CAAU,UAACC,IAAD,EAAOC,GAAP;AAAA,4BACN;AAAK,aAAG,EAAEA;AAAV,wBACI,uEAAKD,IAAI,CAACE,KAAV,CADJ,eAEI,wEAAMF,IAAI,CAACG,IAAX,CAFJ,CADM;AAAA,OAAV,CAFJ;AASA,0BAAO;AAAK,iBAAS,EAAC;AAAf,SAAwBL,UAAxB,CAAP;AACH;;;;EAdeM,4CAAK,CAACC,S;AAiBXC,8HAAS,CAAC,OAAD,CAAT,CAAmBX,KAAnB,CAAf,E;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAMY,YAAY,GAAlB;AACA,IAAMC,aAAa,GAAnB;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,QAAW;AAChC,SAAO;AACHC,QAAI,EADD;AAEHlB,SAAK,EAALA;AAFG,GAAP;AADG;AAOA,IAAMmB,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B,SAAO;AACHD,QAAI,EAAEF;AADH,GAAP;AADG,E;;;;;;;;;;;;ACVP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEO,IAAMnB,SAAS,GAAG,SAAZA,SAAY,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAAd;AACI;AACI;AAEIC,aAAK,EAAED,MAAM,CAACC;AAFlB;;AAIJ;AACI;AAPR;AADG,E;;;;;;;;;;;;;;;;;;;;;;;;;;kGCGUoB,gB;mGAIAC,U;;AATjB;AACA;AAEA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,oEAAS,yDAAf,UAAe,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACW,iBAAMC,+DAAI,CAAV,UAAU,CAAV;;AADX;AACCC,iBADD,iBACCA;AADD;AAEH,iBAAMC,8DAAG,CAACR,0DAAS,CAAnB,OAAmB,CAAV,CAAT;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;SAKQE,U;;;;;oLAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BO,0CAD3B,2CAC2BA,CAD3B;;AAAA;AACUC,oBADV,iBACUA;AADV,8CAIWA,QAAQ,CAJnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"1.bundle.js","sourcesContent":["import { POSTS_LOADED } from \"./actions\";\n\nexport const postsPage = (state = {}, action) => {\n    switch (action.type) {\n        case POSTS_LOADED:\n            return {\n                ...state,\n                posts: action.posts,\n            };\n        default:\n            return state;\n    }\n};\n","import React from \"react\";\n\nimport { routeNode } from \"react-router5\";\nimport { posts } from \"redux/posts/reducers\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.application.postsPage.posts,\n    };\n};\n\n@connect(mapStateToProps)\nclass Posts extends React.Component {\n    render() {\n        let { posts } = this.props;\n\n        let postsItems =\n            posts &&\n            posts.map((post, key) => (\n                <div key={key}>\n                    <h3>{post.title}</h3>\n                    <div>{post.body}</div>\n                </div>\n            ));\n\n        return <div className=\"posts\">{postsItems}</div>;\n    }\n}\n\nexport default routeNode(\"posts\")(Posts);\n","export const POSTS_LOADED = \"POSTS_LOADED\";\nexport const POSTS_REQUEST = \"POSTS_REQUEST\";\n\nexport const loadPosts = (posts) => {\n    return {\n        type: POSTS_LOADED,\n        posts,\n    };\n};\n\nexport const fetchPosts = () => {\n    return {\n        type: POSTS_REQUEST,\n    };\n};\n","import { postsPage as reducer } from \"./reducers\";\nimport { sagaPostsWatcher as saga } from \"./sagas\";\nimport { default as component } from \"./Posts.jsx\";\nexport { reducer, saga, component };\n","import { POSTS_LOADED } from \"./actions\";\n\nexport const postsPage = (state = {}, action) => {\n    switch (action.type) {\n        case POSTS_LOADED:\n            return {\n                ...state,\n                posts: action.posts,\n            };\n        default:\n            return state;\n    }\n};\n","import { takeEvery, put, call } from \"redux-saga/effects\";\nimport { POSTS_REQUEST, loadPosts } from \"./actions\";\n\nimport * as axios from \"axios\";\n\nexport function* sagaPostsWatcher() {\n    yield takeEvery(POSTS_REQUEST, sagaWorker);\n}\n\nexport function* sagaWorker() {\n    let payload = yield call(fetchPosts);\n    yield put(loadPosts(payload));\n}\n\nasync function fetchPosts() {\n    const response = await axios.get(\n        \"http://jsonplaceholder.typicode.com/posts\"\n    );\n    return response.data;\n}\n"],"sourceRoot":""}